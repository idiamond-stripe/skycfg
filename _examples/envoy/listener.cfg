# Copyright 2020 The Skycfg Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

v2 = proto.package("envoy.api.v2")
listenerv2 = proto.package("envoy.api.v2.listener")
routev3 = proto.package("envoy.config.route.v3")
accesslogv3 = proto.package("envoy.config.accesslog.v3")

hcmv3 = proto.package("envoy.extensions.filters.network.http_connection_manager.v3")
fileAccessLoggers = proto.package("envoy.extensions.access_loggers.file.v3")


def virtual_host(name):
    return routev3.VirtualHost(
        name=name,
        domains=["*"],
        routes=[
            routev3.Route(
                match=routev3.RouteMatch(prefix="/"),
                route=routev3.RouteAction(
                    cluster=name,
                    auto_host_rewrite=True,
                ),
            ),
        ],
    )


def http_connection_manager(cluster_name):
    access_log_config = fileAccessLoggers.FileAccessLog(
        path="/dev/stdout",
    )

    return hcmv3.HttpConnectionManager(
        stat_prefix="ingress_http",
        codec_type=hcmv3.HttpConnectionManager.CodecType.AUTO,
        access_log=[
            accesslogv3.AccessLog(
                typed_config=proto.to_any(access_log_config),
            ),
        ],
        route_config=routev3.RouteConfiguration(
            name="route_" + cluster_name,
            virtual_hosts=[
                virtual_host(cluster_name),
            ],
        ),
        http_filters=[
            hcmv3.HttpFilter(
                name="envoy.filters.http.router",
            )
        ],
    )


def proxy_listener(address, cluster_name):
    hcm = http_connection_manager(cluster_name)
    listener = v2.Listener(
        name="listener_" + cluster_name,
        address=address,
        filter_chains=[
            listenerv2.FilterChain(
                filters=[
                    listenerv2.Filter(
                        name="envoy.filters.network.http_connection_manager",
                        typed_config=proto.to_any(hcm),
                    ),
                ],
            )
        ],
    )
    return listener
